package logger

import (
	"go.uber.org/zap"
)

type Exec interface {
	// GetZap returns instance *zap.Logger
	GetZap() *zap.Logger

	// Sync Forces any buffered log entries to be written out to the destination. Crucial for ensuring all logs are saved before application exit.
	Sync()

	// Info Logs an informational message
	Info(state, msg string, args ...interface{})

	// Error Logs a recoverable error that occurred during execution.
	Error(state, msg string, args ...interface{})

	// Warn Logs a potentially harmful situation or an unexpected event that isn't an error.
	Warn(state, msg string, args ...interface{})

	// Panic Logs a message and then panics (a severe, unrecoverable error that usually crashes the Goroutine).
	Panic(state, msg string, args ...interface{})

	// Fatal Logs a message and then calls os.Exit(1) (terminates the entire application).
	Fatal(state, msg string, args ...interface{})

	// LogRequest Logs an incoming request to the application (e.g., an HTTP server receiving a client request).
	LogRequest(req *RequestLogger)

	// LogResponse Logs the outgoing response generated by the application for an incoming request.
	LogResponse(resp *ResponseLogger)

	// LogExtRequest Logs an outgoing request made by the application to an external service (External Request).
	LogExtRequest(req *RequestLogger)

	// LogExtResponse Logs the response received from an external service after an outgoing request (External Response).
	LogExtResponse(resp *ResponseLogger)
}
